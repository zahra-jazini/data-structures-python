{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "44d337b0",
   "metadata": {
    "papermill": {
     "duration": 0.001976,
     "end_time": "2025-05-08T06:29:05.614367",
     "exception": false,
     "start_time": "2025-05-08T06:29:05.612391",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "\n",
    "شرح پروژه: پیاده‌سازی الگوریتم جستجوی دودویی برای پیدا کردن عنصر در یک آرایه مرتب شده.\n",
    "\n",
    "A project focused on the binary search algorithm, demonstrating its efficiency for searching elements in a sorted array. The algorithm has a time complexity of O(log n), making it efficient for large datasets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "fcd33d46",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-08T06:29:05.618921Z",
     "iopub.status.busy": "2025-05-08T06:29:05.618556Z",
     "iopub.status.idle": "2025-05-08T06:29:11.475330Z",
     "shell.execute_reply": "2025-05-08T06:29:11.474088Z"
    },
    "papermill": {
     "duration": 5.861053,
     "end_time": "2025-05-08T06:29:11.477110",
     "exception": false,
     "start_time": "2025-05-08T06:29:05.616057",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: matplotlib in /usr/local/lib/python3.11/dist-packages (3.7.5)\r\n",
      "Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (1.26.4)\r\n",
      "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.3.1)\r\n",
      "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (0.12.1)\r\n",
      "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (4.56.0)\r\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.4.8)\r\n",
      "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (24.2)\r\n",
      "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (11.1.0)\r\n",
      "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (3.2.1)\r\n",
      "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (2.9.0.post0)\r\n",
      "Requirement already satisfied: mkl_fft in /usr/local/lib/python3.11/dist-packages (from numpy) (1.3.8)\r\n",
      "Requirement already satisfied: mkl_random in /usr/local/lib/python3.11/dist-packages (from numpy) (1.2.4)\r\n",
      "Requirement already satisfied: mkl_umath in /usr/local/lib/python3.11/dist-packages (from numpy) (0.1.1)\r\n",
      "Requirement already satisfied: mkl in /usr/local/lib/python3.11/dist-packages (from numpy) (2025.1.0)\r\n",
      "Requirement already satisfied: tbb4py in /usr/local/lib/python3.11/dist-packages (from numpy) (2022.1.0)\r\n",
      "Requirement already satisfied: mkl-service in /usr/local/lib/python3.11/dist-packages (from numpy) (2.4.1)\r\n",
      "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.7->matplotlib) (1.17.0)\r\n",
      "Requirement already satisfied: intel-openmp<2026,>=2024 in /usr/local/lib/python3.11/dist-packages (from mkl->numpy) (2024.2.0)\r\n",
      "Requirement already satisfied: tbb==2022.* in /usr/local/lib/python3.11/dist-packages (from mkl->numpy) (2022.1.0)\r\n",
      "Requirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.11/dist-packages (from tbb==2022.*->mkl->numpy) (1.2.0)\r\n",
      "Requirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.11/dist-packages (from mkl_umath->numpy) (2024.2.0)\r\n",
      "Requirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.11/dist-packages (from intel-openmp<2026,>=2024->mkl->numpy) (2024.2.0)\r\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install matplotlib numpy\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "45db87cc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-08T06:29:11.483048Z",
     "iopub.status.busy": "2025-05-08T06:29:11.482720Z",
     "iopub.status.idle": "2025-05-08T06:29:12.904886Z",
     "shell.execute_reply": "2025-05-08T06:29:12.903587Z"
    },
    "papermill": {
     "duration": 1.427025,
     "end_time": "2025-05-08T06:29:12.906452",
     "exception": false,
     "start_time": "2025-05-08T06:29:11.479427",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_13/3132683137.py:30: MatplotlibDeprecationWarning: The get_cmap function was deprecated in Matplotlib 3.7 and will be removed two minor releases later. Use ``matplotlib.colormaps[name]`` or ``matplotlib.colormaps.get_cmap(obj)`` instead.\n",
      "  cmap = plt.cm.get_cmap('coolwarm')\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Target 15 found at index 7\n"
     ]
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "# Binary Search Implementation\n",
    "def binary_search(arr, target):\n",
    "    low = 0\n",
    "    high = len(arr) - 1\n",
    "    steps = []  # To record the steps for visualization\n",
    "    while low <= high:\n",
    "        mid = (low + high) // 2\n",
    "        steps.append(arr[low:high+1])  # Record the current subarray being searched\n",
    "        \n",
    "        if arr[mid] == target:\n",
    "            return mid, steps\n",
    "        elif arr[mid] < target:\n",
    "            low = mid + 1\n",
    "        else:\n",
    "            high = mid - 1\n",
    "    return -1, steps\n",
    "\n",
    "# Function to visualize the binary search steps\n",
    "def visualize_binary_search(arr, target):\n",
    "    index, steps = binary_search(arr, target)\n",
    "    \n",
    "    # Create a figure for plotting\n",
    "    fig, ax = plt.subplots(figsize=(10, 6))\n",
    "    ax.set_title(f'Binary Search Visualization for Target {target}', fontsize=14)\n",
    "    \n",
    "    # Create a colormap for visualization\n",
    "    cmap = plt.cm.get_cmap('coolwarm')\n",
    "    \n",
    "    # Loop through each step and visualize it\n",
    "    for i, step in enumerate(steps):\n",
    "        ax.clear()  # Clear the plot before drawing the next step\n",
    "        ax.barh(np.arange(len(step)), step, align='center', color=cmap(i / len(steps)))\n",
    "        ax.set_yticks(np.arange(len(step)))\n",
    "        ax.set_yticklabels(step)\n",
    "        ax.set_xlabel('Elements')\n",
    "        ax.set_title(f'Search Step {i + 1} (Searching for {target})')\n",
    "        \n",
    "        # Highlight the current middle element (which is being compared)\n",
    "        if len(step) > 0:\n",
    "            mid = len(step) // 2\n",
    "            ax.text(mid, len(step)//2, f'Mid: {step[mid]}', ha='center', va='center', color='black', fontsize=12)\n",
    "        \n",
    "        plt.pause(0.5)  # Pause to allow for a dynamic plot display\n",
    "    \n",
    "    # Final search result\n",
    "    if index != -1:\n",
    "        print(f\"Target {target} found at index {index}\")\n",
    "    else:\n",
    "        print(f\"Target {target} not found in the array\")\n",
    "    plt.show()\n",
    "\n",
    "# Example Array and Target\n",
    "arr = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\n",
    "target = 15\n",
    "\n",
    "# Visualize Binary Search\n",
    "visualize_binary_search(arr, target)\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [],
   "dockerImageVersionId": 31012,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 13.431693,
   "end_time": "2025-05-08T06:29:13.328867",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-05-08T06:28:59.897174",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
