{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "2e31ad1d",
   "metadata": {
    "papermill": {
     "duration": 0.002127,
     "end_time": "2025-05-08T06:01:26.669082",
     "exception": false,
     "start_time": "2025-05-08T06:01:26.666955",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "\n",
    "This project includes basic data structures implementation like arrays, stacks, queues, and linked lists in Python. The goal is to understand the core functionality of each data structure and how to perform basic operations like insertion, deletion, and traversal."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e64b6d38",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-08T06:01:26.673550Z",
     "iopub.status.busy": "2025-05-08T06:01:26.673261Z",
     "iopub.status.idle": "2025-05-08T06:01:26.686127Z",
     "shell.execute_reply": "2025-05-08T06:01:26.685476Z"
    },
    "papermill": {
     "duration": 0.016611,
     "end_time": "2025-05-08T06:01:26.687451",
     "exception": false,
     "start_time": "2025-05-08T06:01:26.670840",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Array Implementation in Python\n",
    "class Array:\n",
    "    def __init__(self, size):\n",
    "        self.size = size\n",
    "        self.array = [None] * size\n",
    "\n",
    "    def insert(self, index, value):\n",
    "        if index < self.size:\n",
    "            self.array[index] = value\n",
    "\n",
    "    def delete(self, index):\n",
    "        if index < self.size:\n",
    "            self.array[index] = None\n",
    "\n",
    "    def display(self):\n",
    "        print(self.array)\n",
    "\n",
    "# Stack Implementation in Python\n",
    "class Stack:\n",
    "    def __init__(self):\n",
    "        self.stack = []\n",
    "\n",
    "    def push(self, value):\n",
    "        self.stack.append(value)\n",
    "\n",
    "    def pop(self):\n",
    "        if len(self.stack) > 0:\n",
    "            return self.stack.pop()\n",
    "\n",
    "    def display(self):\n",
    "        print(self.stack)\n",
    "\n",
    "# Queue Implementation in Python\n",
    "class Queue:\n",
    "    def __init__(self):\n",
    "        self.queue = []\n",
    "\n",
    "    def enqueue(self, value):\n",
    "        self.queue.append(value)\n",
    "\n",
    "    def dequeue(self):\n",
    "        if len(self.queue) > 0:\n",
    "            return self.queue.pop(0)\n",
    "\n",
    "    def display(self):\n",
    "        print(self.queue)\n",
    "\n",
    "# Linked List Implementation in Python\n",
    "class Node:\n",
    "    def __init__(self, value):\n",
    "        self.value = value\n",
    "        self.next = None\n",
    "\n",
    "class LinkedList:\n",
    "    def __init__(self):\n",
    "        self.head = None\n",
    "\n",
    "    def insert(self, value):\n",
    "        new_node = Node(value)\n",
    "        new_node.next = self.head\n",
    "        self.head = new_node\n",
    "\n",
    "    def delete(self, value):\n",
    "        current = self.head\n",
    "        prev = None\n",
    "        while current:\n",
    "            if current.value == value:\n",
    "                if prev:\n",
    "                    prev.next = current.next\n",
    "                else:\n",
    "                    self.head = current.next\n",
    "                return\n",
    "            prev = current\n",
    "            current = current.next\n",
    "\n",
    "    def display(self):\n",
    "        current = self.head\n",
    "        while current:\n",
    "            print(current.value, end=\" -> \")\n",
    "            current = current.next\n",
    "        print(\"None\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "63af54f5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-08T06:01:26.691791Z",
     "iopub.status.busy": "2025-05-08T06:01:26.691544Z",
     "iopub.status.idle": "2025-05-08T06:01:27.026624Z",
     "shell.execute_reply": "2025-05-08T06:01:27.025492Z"
    },
    "papermill": {
     "duration": 0.339152,
     "end_time": "2025-05-08T06:01:27.028458",
     "exception": false,
     "start_time": "2025-05-08T06:01:26.689306",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 500x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 500x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "class Stack:\n",
    "    def __init__(self):\n",
    "        self.stack = []\n",
    "\n",
    "    def push(self, item):\n",
    "        self.stack.append(item)\n",
    "\n",
    "    def pop(self):\n",
    "        if len(self.stack) > 0:\n",
    "            return self.stack.pop()\n",
    "        return \"Stack is empty\"\n",
    "\n",
    "    def display(self):\n",
    "        fig, ax = plt.subplots(figsize=(5, 5))\n",
    "        ax.set_title('Stack Visualization', fontsize=14)\n",
    "        ax.barh(np.arange(len(self.stack)), self.stack, align='center', color='skyblue')\n",
    "        ax.set_yticks(np.arange(len(self.stack)))\n",
    "        ax.set_yticklabels(self.stack)\n",
    "        plt.xlabel('Elements in Stack')\n",
    "        plt.show()\n",
    "\n",
    "class Queue:\n",
    "    def __init__(self):\n",
    "        self.queue = []\n",
    "\n",
    "    def enqueue(self, item):\n",
    "        self.queue.append(item)\n",
    "\n",
    "    def dequeue(self):\n",
    "        if len(self.queue) > 0:\n",
    "            return self.queue.pop(0)\n",
    "        return \"Queue is empty\"\n",
    "\n",
    "    def display(self):\n",
    "        fig, ax = plt.subplots(figsize=(5, 5))\n",
    "        ax.set_title('Queue Visualization', fontsize=14)\n",
    "        ax.barh(np.arange(len(self.queue)), self.queue, align='center', color='lightcoral')\n",
    "        ax.set_yticks(np.arange(len(self.queue)))\n",
    "        ax.set_yticklabels(self.queue)\n",
    "        plt.xlabel('Elements in Queue')\n",
    "        plt.show()\n",
    "\n",
    "# Stack Example\n",
    "stack = Stack()\n",
    "stack.push(10)\n",
    "stack.push(20)\n",
    "stack.push(30)\n",
    "stack.display()  # Show the stack graphically\n",
    "\n",
    "# Queue Example\n",
    "queue = Queue()\n",
    "queue.enqueue(5)\n",
    "queue.enqueue(10)\n",
    "queue.enqueue(15)\n",
    "queue.display()  # Show the queue graphically\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [],
   "dockerImageVersionId": 31012,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 5.481625,
   "end_time": "2025-05-08T06:01:27.449803",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-05-08T06:01:21.968178",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
