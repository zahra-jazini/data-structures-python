{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "cc8a9137",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-05-08T06:33:52.019829Z",
     "iopub.status.busy": "2025-05-08T06:33:52.018645Z",
     "iopub.status.idle": "2025-05-08T06:33:54.052001Z",
     "shell.execute_reply": "2025-05-08T06:33:54.050992Z"
    },
    "papermill": {
     "duration": 2.039441,
     "end_time": "2025-05-08T06:33:54.053783",
     "exception": false,
     "start_time": "2025-05-08T06:33:52.014342",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d5935214",
   "metadata": {
    "papermill": {
     "duration": 0.00205,
     "end_time": "2025-05-08T06:33:54.058250",
     "exception": false,
     "start_time": "2025-05-08T06:33:54.056200",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "توضیحات کد:\n",
    "ساخت گراف وزن‌دار: ابتدا یک گراف نمونه وزن‌دار با استفاده از networkx ساخته می‌شود. این گراف شامل یال‌هایی با وزن‌های مختلف است که نشان‌دهنده هزینه‌ها یا فاصله‌های بین گره‌ها هستند.\n",
    "\n",
    "نمایش گراف: با استفاده از matplotlib و networkx گراف به صورت گرافیکی نمایش داده می‌شود. همچنین، مسیر کوتاه‌ترین مسیر با رنگ قرمز نمایش داده می‌شود.\n",
    "\n",
    "الگوریتم Dijkstra:\n",
    "\n",
    "این الگوریتم ابتدا تمامی گره‌ها را با فاصله‌های بی‌نهایت از گره شروع مقداردهی می‌کند و سپس گره‌ها را یکی‌یکی بررسی می‌کند تا نزدیک‌ترین گره به گره شروع پیدا شود.\n",
    "\n",
    "در هر مرحله، فاصله گره‌های هم‌جوار بروزرسانی می‌شود و مسیر کوتاه‌ترین به‌روز می‌شود.\n",
    "\n",
    "پس از پیدا کردن گره هدف، مسیر از گره شروع به گره هدف بازسازی شده و نمایش داده می‌شود.\n",
    "\n",
    "خروجی گرافیکی:\n",
    "\n",
    "گراف به‌صورت گرافیکی رسم می‌شود و مسیر کوتاه‌ترین با رنگ قرمز برجسته می‌شود."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "21bb2d2a",
   "metadata": {
    "papermill": {
     "duration": 0.001781,
     "end_time": "2025-05-08T06:33:54.062524",
     "exception": false,
     "start_time": "2025-05-08T06:33:54.060743",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "نکات:\n",
    "کتابخانه‌ها:\n",
    "\n",
    "networkx: برای ساخت و مدیریت گراف‌های وزن‌دار.\n",
    "\n",
    "matplotlib: برای ترسیم گراف‌ها و نمایش گرافیکی الگوریتم‌ها."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6acda48e",
   "metadata": {
    "papermill": {
     "duration": 0.001684,
     "end_time": "2025-05-08T06:33:54.066176",
     "exception": false,
     "start_time": "2025-05-08T06:33:54.064492",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Dijkstra's Algorithm for Shortest Path"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f0f773d6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-08T06:33:54.071401Z",
     "iopub.status.busy": "2025-05-08T06:33:54.070937Z",
     "iopub.status.idle": "2025-05-08T06:33:59.204349Z",
     "shell.execute_reply": "2025-05-08T06:33:59.202965Z"
    },
    "papermill": {
     "duration": 5.138091,
     "end_time": "2025-05-08T06:33:59.206113",
     "exception": false,
     "start_time": "2025-05-08T06:33:54.068022",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: matplotlib in /usr/local/lib/python3.11/dist-packages (3.7.5)\r\n",
      "Requirement already satisfied: networkx in /usr/local/lib/python3.11/dist-packages (3.4.2)\r\n",
      "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.3.1)\r\n",
      "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (0.12.1)\r\n",
      "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (4.56.0)\r\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.4.8)\r\n",
      "Requirement already satisfied: numpy<2,>=1.20 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.26.4)\r\n",
      "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (24.2)\r\n",
      "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (11.1.0)\r\n",
      "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (3.2.1)\r\n",
      "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (2.9.0.post0)\r\n",
      "Requirement already satisfied: mkl_fft in /usr/local/lib/python3.11/dist-packages (from numpy<2,>=1.20->matplotlib) (1.3.8)\r\n",
      "Requirement already satisfied: mkl_random in /usr/local/lib/python3.11/dist-packages (from numpy<2,>=1.20->matplotlib) (1.2.4)\r\n",
      "Requirement already satisfied: mkl_umath in /usr/local/lib/python3.11/dist-packages (from numpy<2,>=1.20->matplotlib) (0.1.1)\r\n",
      "Requirement already satisfied: mkl in /usr/local/lib/python3.11/dist-packages (from numpy<2,>=1.20->matplotlib) (2025.1.0)\r\n",
      "Requirement already satisfied: tbb4py in /usr/local/lib/python3.11/dist-packages (from numpy<2,>=1.20->matplotlib) (2022.1.0)\r\n",
      "Requirement already satisfied: mkl-service in /usr/local/lib/python3.11/dist-packages (from numpy<2,>=1.20->matplotlib) (2.4.1)\r\n",
      "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.7->matplotlib) (1.17.0)\r\n",
      "Requirement already satisfied: intel-openmp<2026,>=2024 in /usr/local/lib/python3.11/dist-packages (from mkl->numpy<2,>=1.20->matplotlib) (2024.2.0)\r\n",
      "Requirement already satisfied: tbb==2022.* in /usr/local/lib/python3.11/dist-packages (from mkl->numpy<2,>=1.20->matplotlib) (2022.1.0)\r\n",
      "Requirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.11/dist-packages (from tbb==2022.*->mkl->numpy<2,>=1.20->matplotlib) (1.2.0)\r\n",
      "Requirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.11/dist-packages (from mkl_umath->numpy<2,>=1.20->matplotlib) (2024.2.0)\r\n",
      "Requirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.11/dist-packages (from intel-openmp<2026,>=2024->mkl->numpy<2,>=1.20->matplotlib) (2024.2.0)\r\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install matplotlib networkx\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a4afb5e3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-08T06:33:59.212952Z",
     "iopub.status.busy": "2025-05-08T06:33:59.212544Z",
     "iopub.status.idle": "2025-05-08T06:34:00.607445Z",
     "shell.execute_reply": "2025-05-08T06:34:00.606411Z"
    },
    "papermill": {
     "duration": 1.400602,
     "end_time": "2025-05-08T06:34:00.609128",
     "exception": false,
     "start_time": "2025-05-08T06:33:59.208526",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The shortest path from node 0 to node 4 is: [0, 4]\n",
      "The shortest distance is: 7\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import networkx as nx\n",
    "import numpy as np\n",
    "\n",
    "# ایجاد یک گراف نمونه وزن‌دار\n",
    "G = nx.Graph()\n",
    "G.add_weighted_edges_from([(0, 1, 4), (0, 2, 2), (1, 3, 5), (2, 1, 1), (2, 3, 8), (3, 4, 3), (4, 0, 7)])\n",
    "\n",
    "# نمایش گراف\n",
    "def draw_graph(G, path=None, title=\"Graph Visualization\"):\n",
    "    plt.figure(figsize=(8, 6))\n",
    "    pos = nx.spring_layout(G)  # موقعیت‌دهی گراف\n",
    "    node_color = ['skyblue' for node in G.nodes()]\n",
    "    edge_color = ['black' for edge in G.edges()]\n",
    "    \n",
    "    if path:\n",
    "        # برجسته کردن مسیر کوتاهترین مسیر\n",
    "        path_edges = [(path[i], path[i + 1]) for i in range(len(path) - 1)]\n",
    "        edge_color = ['red' if edge in path_edges or (edge[1], edge[0]) in path_edges else 'black' for edge in G.edges()]\n",
    "\n",
    "    nx.draw(G, pos, with_labels=True, node_color=node_color, edge_color=edge_color, node_size=2000, font_size=15, font_weight='bold', width=2)\n",
    "    labels = nx.get_edge_attributes(G, 'weight')\n",
    "    nx.draw_networkx_edge_labels(G, pos, edge_labels=labels)\n",
    "    plt.title(title)\n",
    "    plt.show()\n",
    "\n",
    "# الگوریتم Dijkstra برای پیدا کردن کوتاه‌ترین مسیر\n",
    "def dijkstra(G, start, end):\n",
    "    # لیست فاصله‌ها از گره شروع به گره‌های دیگر\n",
    "    distances = {node: float('inf') for node in G.nodes()}\n",
    "    distances[start] = 0\n",
    "    shortest_path = {node: None for node in G.nodes()}  # مسیر کوتاه‌ترین\n",
    "    nodes_to_visit = list(G.nodes())\n",
    "\n",
    "    while nodes_to_visit:\n",
    "        # انتخاب نزدیک‌ترین گره به گره شروع\n",
    "        min_node = None\n",
    "        for node in nodes_to_visit:\n",
    "            if min_node is None:\n",
    "                min_node = node\n",
    "            elif distances[node] < distances[min_node]:\n",
    "                min_node = node\n",
    "\n",
    "        # بروزرسانی فاصله‌های گره‌های هم‌جوار\n",
    "        for neighbor in G.neighbors(min_node):\n",
    "            weight = G[min_node][neighbor]['weight']\n",
    "            if distances[min_node] + weight < distances[neighbor]:\n",
    "                distances[neighbor] = distances[min_node] + weight\n",
    "                shortest_path[neighbor] = min_node\n",
    "\n",
    "        nodes_to_visit.remove(min_node)\n",
    "\n",
    "    # بازسازی مسیر از گره شروع به گره هدف\n",
    "    path = []\n",
    "    node = end\n",
    "    while node is not None:\n",
    "        path.append(node)\n",
    "        node = shortest_path[node]\n",
    "    path.reverse()\n",
    "\n",
    "    return path, distances[end]\n",
    "\n",
    "# اجرای Dijkstra برای پیدا کردن کوتاه‌ترین مسیر\n",
    "start_node = 0\n",
    "end_node = 4\n",
    "shortest_path, shortest_distance = dijkstra(G, start_node, end_node)\n",
    "\n",
    "# نمایش گراف با مسیر کوتاه‌ترین\n",
    "print(f\"The shortest path from node {start_node} to node {end_node} is: {shortest_path}\")\n",
    "print(f\"The shortest distance is: {shortest_distance}\")\n",
    "draw_graph(G, path=shortest_path, title=f\"Dijkstra's Algorithm: Shortest Path from {start_node} to {end_node}\")\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [],
   "dockerImageVersionId": 31012,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 15.478737,
   "end_time": "2025-05-08T06:34:01.234534",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-05-08T06:33:45.755797",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
